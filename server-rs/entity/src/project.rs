//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "project")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "appraiserName")]
    pub appraiser_name: String,
    #[sea_orm(column_name = "assigneeName")]
    pub assignee_name: String,
    #[sea_orm(column_name = "auditorName")]
    pub auditor_name: Option<String>,
    pub conclusions: Option<i32>,
    #[sea_orm(column_name = "displayStatus")]
    pub display_status: String,
    #[sea_orm(column_name = "nextYear")]
    pub next_year: Option<i8>,
    #[sea_orm(column_name = "principalName")]
    pub principal_name: Option<String>,
    #[sea_orm(column_name = "projectId")]
    pub project_id: String,
    #[sea_orm(column_name = "projectNo")]
    pub project_no: Option<String>,
    pub repeat: i8,
    #[sea_orm(column_name = "reportType")]
    pub report_type: i32,
    #[sea_orm(column_name = "submitDate")]
    pub submit_date: String,
    #[sea_orm(column_name = "surveyorNames")]
    pub surveyor_names: Option<String>,
    #[sea_orm(column_name = "systemId")]
    pub system_id: String,
    #[sea_orm(column_name = "selfId", unique)]
    pub self_id: String,
    #[sea_orm(column_name = "itemCName")]
    pub item_c_name: Option<String>,
    #[sea_orm(column_name = "itemEName")]
    pub item_e_name: Option<String>,
    pub mnotes: Option<String>,
    #[sea_orm(column_name = "reportNo")]
    pub report_no: Option<String>,
    pub tnotes: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
